<?php
/**
 * UserResultSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  RadioManager
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RadioManager
 *
 * RadioManager
 *
 * OpenAPI spec version: 2.0
 * Contact: support@pluxbox.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.0
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RadioManager\Model;

use \ArrayAccess;
use \RadioManager\ObjectSerializer;

/**
 * UserResultSettings Class Doc Comment
 *
 * @category Class
 * @package  RadioManager
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserResultSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserResult_settings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'show_side_bar' => 'bool',
        'show_social_bar' => 'bool',
        'show_checkbox_column' => 'bool',
        'show_time_column' => 'bool',
        'show_speech_time' => 'bool',
        'zoom_factor' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'show_side_bar' => null,
        'show_social_bar' => null,
        'show_checkbox_column' => null,
        'show_time_column' => null,
        'show_speech_time' => null,
        'zoom_factor' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'show_side_bar' => 'showSideBar',
        'show_social_bar' => 'showSocialBar',
        'show_checkbox_column' => 'showCheckboxColumn',
        'show_time_column' => 'showTimeColumn',
        'show_speech_time' => 'showSpeechTime',
        'zoom_factor' => 'zoomFactor'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'show_side_bar' => 'setShowSideBar',
        'show_social_bar' => 'setShowSocialBar',
        'show_checkbox_column' => 'setShowCheckboxColumn',
        'show_time_column' => 'setShowTimeColumn',
        'show_speech_time' => 'setShowSpeechTime',
        'zoom_factor' => 'setZoomFactor'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'show_side_bar' => 'getShowSideBar',
        'show_social_bar' => 'getShowSocialBar',
        'show_checkbox_column' => 'getShowCheckboxColumn',
        'show_time_column' => 'getShowTimeColumn',
        'show_speech_time' => 'getShowSpeechTime',
        'zoom_factor' => 'getZoomFactor'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['show_side_bar'] = isset($data['show_side_bar']) ? $data['show_side_bar'] : null;
        $this->container['show_social_bar'] = isset($data['show_social_bar']) ? $data['show_social_bar'] : null;
        $this->container['show_checkbox_column'] = isset($data['show_checkbox_column']) ? $data['show_checkbox_column'] : null;
        $this->container['show_time_column'] = isset($data['show_time_column']) ? $data['show_time_column'] : null;
        $this->container['show_speech_time'] = isset($data['show_speech_time']) ? $data['show_speech_time'] : null;
        $this->container['zoom_factor'] = isset($data['zoom_factor']) ? $data['zoom_factor'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets show_side_bar
     *
     * @return bool
     */
    public function getShowSideBar()
    {
        return $this->container['show_side_bar'];
    }

    /**
     * Sets show_side_bar
     *
     * @param bool $show_side_bar show_side_bar
     *
     * @return $this
     */
    public function setShowSideBar($show_side_bar)
    {
        $this->container['show_side_bar'] = $show_side_bar;

        return $this;
    }

    /**
     * Gets show_social_bar
     *
     * @return bool
     */
    public function getShowSocialBar()
    {
        return $this->container['show_social_bar'];
    }

    /**
     * Sets show_social_bar
     *
     * @param bool $show_social_bar show_social_bar
     *
     * @return $this
     */
    public function setShowSocialBar($show_social_bar)
    {
        $this->container['show_social_bar'] = $show_social_bar;

        return $this;
    }

    /**
     * Gets show_checkbox_column
     *
     * @return bool
     */
    public function getShowCheckboxColumn()
    {
        return $this->container['show_checkbox_column'];
    }

    /**
     * Sets show_checkbox_column
     *
     * @param bool $show_checkbox_column show_checkbox_column
     *
     * @return $this
     */
    public function setShowCheckboxColumn($show_checkbox_column)
    {
        $this->container['show_checkbox_column'] = $show_checkbox_column;

        return $this;
    }

    /**
     * Gets show_time_column
     *
     * @return bool
     */
    public function getShowTimeColumn()
    {
        return $this->container['show_time_column'];
    }

    /**
     * Sets show_time_column
     *
     * @param bool $show_time_column show_time_column
     *
     * @return $this
     */
    public function setShowTimeColumn($show_time_column)
    {
        $this->container['show_time_column'] = $show_time_column;

        return $this;
    }

    /**
     * Gets show_speech_time
     *
     * @return bool
     */
    public function getShowSpeechTime()
    {
        return $this->container['show_speech_time'];
    }

    /**
     * Sets show_speech_time
     *
     * @param bool $show_speech_time show_speech_time
     *
     * @return $this
     */
    public function setShowSpeechTime($show_speech_time)
    {
        $this->container['show_speech_time'] = $show_speech_time;

        return $this;
    }

    /**
     * Gets zoom_factor
     *
     * @return int
     */
    public function getZoomFactor()
    {
        return $this->container['zoom_factor'];
    }

    /**
     * Sets zoom_factor
     *
     * @param int $zoom_factor zoom_factor
     *
     * @return $this
     */
    public function setZoomFactor($zoom_factor)
    {
        $this->container['zoom_factor'] = $zoom_factor;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


