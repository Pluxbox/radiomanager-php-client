<?php
/**
 * StationResultStation
 *
 * PHP version 5
 *
 * @category Class
 * @package  RadioManager
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RadioManager
 *
 * RadioManager
 *
 * OpenAPI spec version: 2.0
 * Contact: support@pluxbox.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RadioManager\Model;

use \ArrayAccess;

/**
 * StationResultStation Class Doc Comment
 *
 * @category    Class
 * @package     RadioManager
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class StationResultStation implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'StationResult_station';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'system_name' => 'string',
        'short_name' => 'string',
        'medium_name' => 'string',
        'website' => 'string',
        'email' => 'string',
        'keywords' => 'string[]',
        'description' => 'string',
        'sms' => 'string',
        'telephone' => 'string',
        'genre_id' => 'int',
        'language' => 'string',
        'active' => 'bool',
        'logo_rectangle' => 'string',
        'logo_128x128' => 'string',
        'logo_320x320' => 'string',
        'logo_600x600' => 'string',
        'pay_off' => 'string',
        'pty_code' => 'int',
        'pty_type' => 'string',
        'station_key' => 'string',
        'timezone' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'system_name' => null,
        'short_name' => null,
        'medium_name' => null,
        'website' => null,
        'email' => null,
        'keywords' => null,
        'description' => null,
        'sms' => null,
        'telephone' => null,
        'genre_id' => null,
        'language' => null,
        'active' => null,
        'logo_rectangle' => null,
        'logo_128x128' => null,
        'logo_320x320' => null,
        'logo_600x600' => null,
        'pay_off' => null,
        'pty_code' => null,
        'pty_type' => null,
        'station_key' => null,
        'timezone' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'system_name' => 'system_name',
        'short_name' => 'short_name',
        'medium_name' => 'medium_name',
        'website' => 'website',
        'email' => 'email',
        'keywords' => 'keywords',
        'description' => 'description',
        'sms' => 'sms',
        'telephone' => 'telephone',
        'genre_id' => 'genre_id',
        'language' => 'language',
        'active' => 'active',
        'logo_rectangle' => 'logo_rectangle',
        'logo_128x128' => 'logo_128x128',
        'logo_320x320' => 'logo_320x320',
        'logo_600x600' => 'logo_600x600',
        'pay_off' => 'pay_off',
        'pty_code' => 'pty_code',
        'pty_type' => 'pty_type',
        'station_key' => 'station_key',
        'timezone' => 'timezone'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'system_name' => 'setSystemName',
        'short_name' => 'setShortName',
        'medium_name' => 'setMediumName',
        'website' => 'setWebsite',
        'email' => 'setEmail',
        'keywords' => 'setKeywords',
        'description' => 'setDescription',
        'sms' => 'setSms',
        'telephone' => 'setTelephone',
        'genre_id' => 'setGenreId',
        'language' => 'setLanguage',
        'active' => 'setActive',
        'logo_rectangle' => 'setLogoRectangle',
        'logo_128x128' => 'setLogo128x128',
        'logo_320x320' => 'setLogo320x320',
        'logo_600x600' => 'setLogo600x600',
        'pay_off' => 'setPayOff',
        'pty_code' => 'setPtyCode',
        'pty_type' => 'setPtyType',
        'station_key' => 'setStationKey',
        'timezone' => 'setTimezone'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'system_name' => 'getSystemName',
        'short_name' => 'getShortName',
        'medium_name' => 'getMediumName',
        'website' => 'getWebsite',
        'email' => 'getEmail',
        'keywords' => 'getKeywords',
        'description' => 'getDescription',
        'sms' => 'getSms',
        'telephone' => 'getTelephone',
        'genre_id' => 'getGenreId',
        'language' => 'getLanguage',
        'active' => 'getActive',
        'logo_rectangle' => 'getLogoRectangle',
        'logo_128x128' => 'getLogo128x128',
        'logo_320x320' => 'getLogo320x320',
        'logo_600x600' => 'getLogo600x600',
        'pay_off' => 'getPayOff',
        'pty_code' => 'getPtyCode',
        'pty_type' => 'getPtyType',
        'station_key' => 'getStationKey',
        'timezone' => 'getTimezone'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['system_name'] = isset($data['system_name']) ? $data['system_name'] : null;
        $this->container['short_name'] = isset($data['short_name']) ? $data['short_name'] : null;
        $this->container['medium_name'] = isset($data['medium_name']) ? $data['medium_name'] : null;
        $this->container['website'] = isset($data['website']) ? $data['website'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['keywords'] = isset($data['keywords']) ? $data['keywords'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['sms'] = isset($data['sms']) ? $data['sms'] : null;
        $this->container['telephone'] = isset($data['telephone']) ? $data['telephone'] : null;
        $this->container['genre_id'] = isset($data['genre_id']) ? $data['genre_id'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['logo_rectangle'] = isset($data['logo_rectangle']) ? $data['logo_rectangle'] : null;
        $this->container['logo_128x128'] = isset($data['logo_128x128']) ? $data['logo_128x128'] : null;
        $this->container['logo_320x320'] = isset($data['logo_320x320']) ? $data['logo_320x320'] : null;
        $this->container['logo_600x600'] = isset($data['logo_600x600']) ? $data['logo_600x600'] : null;
        $this->container['pay_off'] = isset($data['pay_off']) ? $data['pay_off'] : null;
        $this->container['pty_code'] = isset($data['pty_code']) ? $data['pty_code'] : null;
        $this->container['pty_type'] = isset($data['pty_type']) ? $data['pty_type'] : null;
        $this->container['station_key'] = isset($data['station_key']) ? $data['station_key'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets created_at
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param \DateTime $created_at
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     * @param \DateTime $updated_at
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets system_name
     * @return string
     */
    public function getSystemName()
    {
        return $this->container['system_name'];
    }

    /**
     * Sets system_name
     * @param string $system_name
     * @return $this
     */
    public function setSystemName($system_name)
    {
        $this->container['system_name'] = $system_name;

        return $this;
    }

    /**
     * Gets short_name
     * @return string
     */
    public function getShortName()
    {
        return $this->container['short_name'];
    }

    /**
     * Sets short_name
     * @param string $short_name
     * @return $this
     */
    public function setShortName($short_name)
    {
        $this->container['short_name'] = $short_name;

        return $this;
    }

    /**
     * Gets medium_name
     * @return string
     */
    public function getMediumName()
    {
        return $this->container['medium_name'];
    }

    /**
     * Sets medium_name
     * @param string $medium_name
     * @return $this
     */
    public function setMediumName($medium_name)
    {
        $this->container['medium_name'] = $medium_name;

        return $this;
    }

    /**
     * Gets website
     * @return string
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     * @param string $website
     * @return $this
     */
    public function setWebsite($website)
    {
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets keywords
     * @return string[]
     */
    public function getKeywords()
    {
        return $this->container['keywords'];
    }

    /**
     * Sets keywords
     * @param string[] $keywords
     * @return $this
     */
    public function setKeywords($keywords)
    {
        $this->container['keywords'] = $keywords;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets sms
     * @return string
     */
    public function getSms()
    {
        return $this->container['sms'];
    }

    /**
     * Sets sms
     * @param string $sms
     * @return $this
     */
    public function setSms($sms)
    {
        $this->container['sms'] = $sms;

        return $this;
    }

    /**
     * Gets telephone
     * @return string
     */
    public function getTelephone()
    {
        return $this->container['telephone'];
    }

    /**
     * Sets telephone
     * @param string $telephone
     * @return $this
     */
    public function setTelephone($telephone)
    {
        $this->container['telephone'] = $telephone;

        return $this;
    }

    /**
     * Gets genre_id
     * @return int
     */
    public function getGenreId()
    {
        return $this->container['genre_id'];
    }

    /**
     * Sets genre_id
     * @param int $genre_id
     * @return $this
     */
    public function setGenreId($genre_id)
    {
        $this->container['genre_id'] = $genre_id;

        return $this;
    }

    /**
     * Gets language
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     * @param string $language
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets active
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     * @param bool $active
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets logo_rectangle
     * @return string
     */
    public function getLogoRectangle()
    {
        return $this->container['logo_rectangle'];
    }

    /**
     * Sets logo_rectangle
     * @param string $logo_rectangle
     * @return $this
     */
    public function setLogoRectangle($logo_rectangle)
    {
        $this->container['logo_rectangle'] = $logo_rectangle;

        return $this;
    }

    /**
     * Gets logo_128x128
     * @return string
     */
    public function getLogo128x128()
    {
        return $this->container['logo_128x128'];
    }

    /**
     * Sets logo_128x128
     * @param string $logo_128x128
     * @return $this
     */
    public function setLogo128x128($logo_128x128)
    {
        $this->container['logo_128x128'] = $logo_128x128;

        return $this;
    }

    /**
     * Gets logo_320x320
     * @return string
     */
    public function getLogo320x320()
    {
        return $this->container['logo_320x320'];
    }

    /**
     * Sets logo_320x320
     * @param string $logo_320x320
     * @return $this
     */
    public function setLogo320x320($logo_320x320)
    {
        $this->container['logo_320x320'] = $logo_320x320;

        return $this;
    }

    /**
     * Gets logo_600x600
     * @return string
     */
    public function getLogo600x600()
    {
        return $this->container['logo_600x600'];
    }

    /**
     * Sets logo_600x600
     * @param string $logo_600x600
     * @return $this
     */
    public function setLogo600x600($logo_600x600)
    {
        $this->container['logo_600x600'] = $logo_600x600;

        return $this;
    }

    /**
     * Gets pay_off
     * @return string
     */
    public function getPayOff()
    {
        return $this->container['pay_off'];
    }

    /**
     * Sets pay_off
     * @param string $pay_off
     * @return $this
     */
    public function setPayOff($pay_off)
    {
        $this->container['pay_off'] = $pay_off;

        return $this;
    }

    /**
     * Gets pty_code
     * @return int
     */
    public function getPtyCode()
    {
        return $this->container['pty_code'];
    }

    /**
     * Sets pty_code
     * @param int $pty_code
     * @return $this
     */
    public function setPtyCode($pty_code)
    {
        $this->container['pty_code'] = $pty_code;

        return $this;
    }

    /**
     * Gets pty_type
     * @return string
     */
    public function getPtyType()
    {
        return $this->container['pty_type'];
    }

    /**
     * Sets pty_type
     * @param string $pty_type
     * @return $this
     */
    public function setPtyType($pty_type)
    {
        $this->container['pty_type'] = $pty_type;

        return $this;
    }

    /**
     * Gets station_key
     * @return string
     */
    public function getStationKey()
    {
        return $this->container['station_key'];
    }

    /**
     * Sets station_key
     * @param string $station_key
     * @return $this
     */
    public function setStationKey($station_key)
    {
        $this->container['station_key'] = $station_key;

        return $this;
    }

    /**
     * Gets timezone
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     * @param string $timezone
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\RadioManager\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\RadioManager\ObjectSerializer::sanitizeForSerialization($this));
    }
}


