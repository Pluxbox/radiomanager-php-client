<?php
/**
 * ItemApi
 * PHP version 5
 *
 * @category Class
 * @package  RadioManager
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RadioManager
 *
 * RadioManager
 *
 * OpenAPI spec version: 2.0
 * Contact: support@pluxbox.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RadioManager\RadioManagerClient;

use \RadioManager\ApiClient;
use \RadioManager\ApiException;
use \RadioManager\Configuration;
use \RadioManager\ObjectSerializer;

/**
 * ItemApi Class Doc Comment
 *
 * @category Class
 * @package  RadioManager
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ItemApi
{
    /**
     * API Client
     *
     * @var \RadioManager\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \RadioManager\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\RadioManager\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \RadioManager\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \RadioManager\ApiClient $apiClient set the API client
     *
     * @return ItemApi
     */
    public function setApiClient(\RadioManager\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createItem
     *
     * Create an new item.
     *
     * @param \RadioManager\RadioManagerModels\ItemDataInput $data Data *(Optional)* (optional)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return \RadioManager\RadioManagerModels\PostSuccess
     */
    public function createItem($data = null)
    {
        list($response) = $this->createItemWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation createItemWithHttpInfo
     *
     * Create an new item.
     *
     * @param \RadioManager\RadioManagerModels\ItemDataInput $data Data *(Optional)* (optional)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return array of \RadioManager\RadioManagerModels\PostSuccess, HTTP status code, HTTP response headers (array of strings)
     */
    public function createItemWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/items";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RadioManager\RadioManagerModels\PostSuccess',
                '/items'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RadioManager\RadioManagerModels\PostSuccess', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\PostSuccess', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\UnprocessableEntity', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\TooManyRequests', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\InternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation currentItemPostStructure
     *
     * Post a current playing item, keep structure
     *
     * @param \RadioManager\RadioManagerModels\ImportItem $data Data *(Optional)* (optional)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return \RadioManager\RadioManagerModels\Success
     */
    public function currentItemPostStructure($data = null)
    {
        list($response) = $this->currentItemPostStructureWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation currentItemPostStructureWithHttpInfo
     *
     * Post a current playing item, keep structure
     *
     * @param \RadioManager\RadioManagerModels\ImportItem $data Data *(Optional)* (optional)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return array of \RadioManager\RadioManagerModels\Success, HTTP status code, HTTP response headers (array of strings)
     */
    public function currentItemPostStructureWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/items/current/structure";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RadioManager\RadioManagerModels\Success',
                '/items/current/structure'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RadioManager\RadioManagerModels\Success', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\Success', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\UnprocessableEntity', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\TooManyRequests', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\InternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation currentItemPostTiming
     *
     * Post a current playing item
     *
     * @param \RadioManager\RadioManagerModels\ImportItem $data Data *(Optional)* (optional)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return \RadioManager\RadioManagerModels\Success
     */
    public function currentItemPostTiming($data = null)
    {
        list($response) = $this->currentItemPostTimingWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation currentItemPostTimingWithHttpInfo
     *
     * Post a current playing item
     *
     * @param \RadioManager\RadioManagerModels\ImportItem $data Data *(Optional)* (optional)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return array of \RadioManager\RadioManagerModels\Success, HTTP status code, HTTP response headers (array of strings)
     */
    public function currentItemPostTimingWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/items/current/timing";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RadioManager\RadioManagerModels\Success',
                '/items/current/timing'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RadioManager\RadioManagerModels\Success', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\Success', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\UnprocessableEntity', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\TooManyRequests', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\InternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteItemById
     *
     * Delete item by ID.
     *
     * @param int $id ID of Item **(Required)** (required)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return \RadioManager\RadioManagerModels\Success
     */
    public function deleteItemById($id)
    {
        list($response) = $this->deleteItemByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteItemByIdWithHttpInfo
     *
     * Delete item by ID.
     *
     * @param int $id ID of Item **(Required)** (required)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return array of \RadioManager\RadioManagerModels\Success, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteItemByIdWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteItemById');
        }
        if (($id < 0)) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling ItemApi.deleteItemById, must be bigger than or equal to 0.');
        }

        // parse inputs
        $resourcePath = "/items/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RadioManager\RadioManagerModels\Success',
                '/items/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RadioManager\RadioManagerModels\Success', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\Success', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getItemById
     *
     * Get extended item details by ID.
     *
     * @param int $id ID of Item **(Required)** (required)
     * @param int $_station_id Query on a different (content providing) station *(Optional)* (optional)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return \RadioManager\RadioManagerModels\ItemResult
     */
    public function getItemById($id, $_station_id = null)
    {
        list($response) = $this->getItemByIdWithHttpInfo($id, $_station_id);
        return $response;
    }

    /**
     * Operation getItemByIdWithHttpInfo
     *
     * Get extended item details by ID.
     *
     * @param int $id ID of Item **(Required)** (required)
     * @param int $_station_id Query on a different (content providing) station *(Optional)* (optional)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return array of \RadioManager\RadioManagerModels\ItemResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getItemByIdWithHttpInfo($id, $_station_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getItemById');
        }
        if (($id < 0)) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling ItemApi.getItemById, must be bigger than or equal to 0.');
        }

        // parse inputs
        $resourcePath = "/items/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($_station_id !== null) {
            $queryParams['_station_id'] = $this->apiClient->getSerializer()->toQueryValue($_station_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RadioManager\RadioManagerModels\ItemResult',
                '/items/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RadioManager\RadioManagerModels\ItemResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\ItemResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\TooManyRequests', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listItems
     *
     * Get a list of all the items currently in your station.
     *
     * @param int $page Current page *(Optional)* (optional)
     * @param string $order_by Field to order the results *(Optional)* (optional)
     * @param string $order_direction Direction of ordering *(Optional)* (optional)
     * @param \DateTime $start_min Minimum start date *(Optional)* (optional)
     * @param \DateTime $start_max Maximum start date *(Optional)* (optional)
     * @param int $duration_min Minimum duration (seconds) *(Optional)* (optional)
     * @param int $duration_max Maximum duration (seconds) *(Optional)* (optional)
     * @param string $status Play Status of item *(Optional)* (optional)
     * @param int $model_type_id Search on ModelType ID *(Optional)* (optional)
     * @param int $program_draft_id Search on Program Draft ID *(Optional)* (optional)
     * @param int $user_draft_id Search on User Draft ID *(Optional)* (optional)
     * @param int $station_draft_id Search on Station Draft ID *(Optional)* (optional)
     * @param int $block_id Search on Block ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param int $broadcast_id Search on Broadcast ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param int $campaign_id Search on Campaign ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param int $contact_id Search on Contact ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param int $program_id Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param int $tag_id Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param int $_station_id Query on a different (content providing) station *(Optional)* (optional)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return \RadioManager\RadioManagerModels\ItemResults
     */
    public function listItems($page = null, $order_by = null, $order_direction = null, $start_min = null, $start_max = null, $duration_min = null, $duration_max = null, $status = null, $model_type_id = null, $program_draft_id = null, $user_draft_id = null, $station_draft_id = null, $block_id = null, $broadcast_id = null, $campaign_id = null, $contact_id = null, $program_id = null, $tag_id = null, $_station_id = null)
    {
        list($response) = $this->listItemsWithHttpInfo($page, $order_by, $order_direction, $start_min, $start_max, $duration_min, $duration_max, $status, $model_type_id, $program_draft_id, $user_draft_id, $station_draft_id, $block_id, $broadcast_id, $campaign_id, $contact_id, $program_id, $tag_id, $_station_id);
        return $response;
    }

    /**
     * Operation listItemsWithHttpInfo
     *
     * Get a list of all the items currently in your station.
     *
     * @param int $page Current page *(Optional)* (optional)
     * @param string $order_by Field to order the results *(Optional)* (optional)
     * @param string $order_direction Direction of ordering *(Optional)* (optional)
     * @param \DateTime $start_min Minimum start date *(Optional)* (optional)
     * @param \DateTime $start_max Maximum start date *(Optional)* (optional)
     * @param int $duration_min Minimum duration (seconds) *(Optional)* (optional)
     * @param int $duration_max Maximum duration (seconds) *(Optional)* (optional)
     * @param string $status Play Status of item *(Optional)* (optional)
     * @param int $model_type_id Search on ModelType ID *(Optional)* (optional)
     * @param int $program_draft_id Search on Program Draft ID *(Optional)* (optional)
     * @param int $user_draft_id Search on User Draft ID *(Optional)* (optional)
     * @param int $station_draft_id Search on Station Draft ID *(Optional)* (optional)
     * @param int $block_id Search on Block ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param int $broadcast_id Search on Broadcast ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param int $campaign_id Search on Campaign ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param int $contact_id Search on Contact ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param int $program_id Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param int $tag_id Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param int $_station_id Query on a different (content providing) station *(Optional)* (optional)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return array of \RadioManager\RadioManagerModels\ItemResults, HTTP status code, HTTP response headers (array of strings)
     */
    public function listItemsWithHttpInfo($page = null, $order_by = null, $order_direction = null, $start_min = null, $start_max = null, $duration_min = null, $duration_max = null, $status = null, $model_type_id = null, $program_draft_id = null, $user_draft_id = null, $station_draft_id = null, $block_id = null, $broadcast_id = null, $campaign_id = null, $contact_id = null, $program_id = null, $tag_id = null, $_station_id = null)
    {
        if (!is_null($page) && ($page < 1)) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling ItemApi.listItems, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/items";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['order-by'] = $this->apiClient->getSerializer()->toQueryValue($order_by);
        }
        // query params
        if ($order_direction !== null) {
            $queryParams['order-direction'] = $this->apiClient->getSerializer()->toQueryValue($order_direction);
        }
        // query params
        if ($start_min !== null) {
            $queryParams['start-min'] = $this->apiClient->getSerializer()->toQueryValue($start_min);
        }
        // query params
        if ($start_max !== null) {
            $queryParams['start-max'] = $this->apiClient->getSerializer()->toQueryValue($start_max);
        }
        // query params
        if ($duration_min !== null) {
            $queryParams['duration-min'] = $this->apiClient->getSerializer()->toQueryValue($duration_min);
        }
        // query params
        if ($duration_max !== null) {
            $queryParams['duration-max'] = $this->apiClient->getSerializer()->toQueryValue($duration_max);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($model_type_id !== null) {
            $queryParams['model_type_id'] = $this->apiClient->getSerializer()->toQueryValue($model_type_id);
        }
        // query params
        if ($program_draft_id !== null) {
            $queryParams['program_draft_id'] = $this->apiClient->getSerializer()->toQueryValue($program_draft_id);
        }
        // query params
        if ($user_draft_id !== null) {
            $queryParams['user_draft_id'] = $this->apiClient->getSerializer()->toQueryValue($user_draft_id);
        }
        // query params
        if ($station_draft_id !== null) {
            $queryParams['station_draft_id'] = $this->apiClient->getSerializer()->toQueryValue($station_draft_id);
        }
        // query params
        if ($block_id !== null) {
            $queryParams['block_id'] = $this->apiClient->getSerializer()->toQueryValue($block_id);
        }
        // query params
        if ($broadcast_id !== null) {
            $queryParams['broadcast_id'] = $this->apiClient->getSerializer()->toQueryValue($broadcast_id);
        }
        // query params
        if ($campaign_id !== null) {
            $queryParams['campaign_id'] = $this->apiClient->getSerializer()->toQueryValue($campaign_id);
        }
        // query params
        if ($contact_id !== null) {
            $queryParams['contact_id'] = $this->apiClient->getSerializer()->toQueryValue($contact_id);
        }
        // query params
        if ($program_id !== null) {
            $queryParams['program_id'] = $this->apiClient->getSerializer()->toQueryValue($program_id);
        }
        // query params
        if ($tag_id !== null) {
            $queryParams['tag_id'] = $this->apiClient->getSerializer()->toQueryValue($tag_id);
        }
        // query params
        if ($_station_id !== null) {
            $queryParams['_station_id'] = $this->apiClient->getSerializer()->toQueryValue($_station_id);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RadioManager\RadioManagerModels\ItemResults',
                '/items'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RadioManager\RadioManagerModels\ItemResults', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\ItemResults', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\UnprocessableEntity', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\TooManyRequests', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation playlistPostStructure
     *
     * Post a playlist, keep current structure
     *
     * @param \RadioManager\RadioManagerModels\Data1 $data Data *(Optional)* (optional)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return \RadioManager\RadioManagerModels\InlineResponse202
     */
    public function playlistPostStructure($data = null)
    {
        list($response) = $this->playlistPostStructureWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation playlistPostStructureWithHttpInfo
     *
     * Post a playlist, keep current structure
     *
     * @param \RadioManager\RadioManagerModels\Data1 $data Data *(Optional)* (optional)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return array of \RadioManager\RadioManagerModels\InlineResponse202, HTTP status code, HTTP response headers (array of strings)
     */
    public function playlistPostStructureWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/items/playlist/structure";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RadioManager\RadioManagerModels\InlineResponse202',
                '/items/playlist/structure'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RadioManager\RadioManagerModels\InlineResponse202', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\InlineResponse202', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\UnprocessableEntity', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\InternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation playlistPostTiming
     *
     * Post a playlist
     *
     * @param \RadioManager\RadioManagerModels\Data $data Data *(Optional)* (optional)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return \RadioManager\RadioManagerModels\InlineResponse202
     */
    public function playlistPostTiming($data = null)
    {
        list($response) = $this->playlistPostTimingWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation playlistPostTimingWithHttpInfo
     *
     * Post a playlist
     *
     * @param \RadioManager\RadioManagerModels\Data $data Data *(Optional)* (optional)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return array of \RadioManager\RadioManagerModels\InlineResponse202, HTTP status code, HTTP response headers (array of strings)
     */
    public function playlistPostTimingWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/items/playlist/timing";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RadioManager\RadioManagerModels\InlineResponse202',
                '/items/playlist/timing'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RadioManager\RadioManagerModels\InlineResponse202', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\InlineResponse202', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\UnprocessableEntity', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\InternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateItemById
     *
     * Update extended item details by ID.
     *
     * @param int $id ID of Item **(Required)** (required)
     * @param \RadioManager\RadioManagerModels\Item $data Data *(Optional)* (optional)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return \RadioManager\RadioManagerModels\Success
     */
    public function updateItemById($id, $data = null)
    {
        list($response) = $this->updateItemByIdWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation updateItemByIdWithHttpInfo
     *
     * Update extended item details by ID.
     *
     * @param int $id ID of Item **(Required)** (required)
     * @param \RadioManager\RadioManagerModels\Item $data Data *(Optional)* (optional)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return array of \RadioManager\RadioManagerModels\Success, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateItemByIdWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateItemById');
        }
        if (($id < 0)) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling ItemApi.updateItemById, must be bigger than or equal to 0.');
        }

        // parse inputs
        $resourcePath = "/items/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RadioManager\RadioManagerModels\Success',
                '/items/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RadioManager\RadioManagerModels\Success', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\Success', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\UnprocessableEntity', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\TooManyRequests', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\InternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
