<?php
/**
 * BroadcastApi
 * PHP version 5
 *
 * @category Class
 * @package  RadioManager
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RadioManager
 *
 * RadioManager
 *
 * OpenAPI spec version: 2.0
 * Contact: support@pluxbox.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RadioManager\RadioManagerClient;

use \RadioManager\ApiClient;
use \RadioManager\ApiException;
use \RadioManager\Configuration;
use \RadioManager\ObjectSerializer;

/**
 * BroadcastApi Class Doc Comment
 *
 * @category Class
 * @package  RadioManager
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BroadcastApi
{
    /**
     * API Client
     *
     * @var \RadioManager\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \RadioManager\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\RadioManager\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \RadioManager\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \RadioManager\ApiClient $apiClient set the API client
     *
     * @return BroadcastApi
     */
    public function setApiClient(\RadioManager\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createBroadcast
     *
     * Create broadcast.
     *
     * @param \RadioManager\RadioManagerModels\BroadcastDataInput $data Data **(Required)** (required)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return \RadioManager\RadioManagerModels\PostSuccess
     */
    public function createBroadcast($data)
    {
        list($response) = $this->createBroadcastWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation createBroadcastWithHttpInfo
     *
     * Create broadcast.
     *
     * @param \RadioManager\RadioManagerModels\BroadcastDataInput $data Data **(Required)** (required)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return array of \RadioManager\RadioManagerModels\PostSuccess, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBroadcastWithHttpInfo($data)
    {
        // verify the required parameter 'data' is set
        if ($data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data when calling createBroadcast');
        }
        // parse inputs
        $resourcePath = "/broadcasts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RadioManager\RadioManagerModels\PostSuccess',
                '/broadcasts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RadioManager\RadioManagerModels\PostSuccess', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\PostSuccess', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\UnprocessableEntity', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\TooManyRequests', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\InternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteBroadcastById
     *
     * Delete broadcast by id
     *
     * @param int $id ID of Broadcast **(Required)** (required)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return \RadioManager\RadioManagerModels\Success
     */
    public function deleteBroadcastById($id)
    {
        list($response) = $this->deleteBroadcastByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteBroadcastByIdWithHttpInfo
     *
     * Delete broadcast by id
     *
     * @param int $id ID of Broadcast **(Required)** (required)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return array of \RadioManager\RadioManagerModels\Success, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteBroadcastByIdWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteBroadcastById');
        }
        if (($id < 0)) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling BroadcastApi.deleteBroadcastById, must be bigger than or equal to 0.');
        }

        // parse inputs
        $resourcePath = "/broadcasts/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RadioManager\RadioManagerModels\Success',
                '/broadcasts/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RadioManager\RadioManagerModels\Success', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\Success', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\TooManyRequests', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getBroadcastById
     *
     * Get broadcast by id
     *
     * @param int $id ID of Broadcast **(Required)** (required)
     * @param int $_station_id Query on a different (content providing) station *(Optional)* (optional)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return \RadioManager\RadioManagerModels\BroadcastResult
     */
    public function getBroadcastById($id, $_station_id = null)
    {
        list($response) = $this->getBroadcastByIdWithHttpInfo($id, $_station_id);
        return $response;
    }

    /**
     * Operation getBroadcastByIdWithHttpInfo
     *
     * Get broadcast by id
     *
     * @param int $id ID of Broadcast **(Required)** (required)
     * @param int $_station_id Query on a different (content providing) station *(Optional)* (optional)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return array of \RadioManager\RadioManagerModels\BroadcastResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBroadcastByIdWithHttpInfo($id, $_station_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getBroadcastById');
        }
        if (($id < 0)) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling BroadcastApi.getBroadcastById, must be bigger than or equal to 0.');
        }

        // parse inputs
        $resourcePath = "/broadcasts/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($_station_id !== null) {
            $queryParams['_station_id'] = $this->apiClient->getSerializer()->toQueryValue($_station_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RadioManager\RadioManagerModels\BroadcastResult',
                '/broadcasts/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RadioManager\RadioManagerModels\BroadcastResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\BroadcastResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\TooManyRequests', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCurrentBroadcast
     *
     * Get current Broadcast
     *
     * @throws \RadioManager\ApiException on non-2xx response
     * @return \RadioManager\RadioManagerModels\Broadcast
     */
    public function getCurrentBroadcast()
    {
        list($response) = $this->getCurrentBroadcastWithHttpInfo();
        return $response;
    }

    /**
     * Operation getCurrentBroadcastWithHttpInfo
     *
     * Get current Broadcast
     *
     * @throws \RadioManager\ApiException on non-2xx response
     * @return array of \RadioManager\RadioManagerModels\Broadcast, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCurrentBroadcastWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/broadcasts/current";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RadioManager\RadioManagerModels\Broadcast',
                '/broadcasts/current'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RadioManager\RadioManagerModels\Broadcast', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\Broadcast', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\TooManyRequests', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getDailyEPG
     *
     * Get daily EPG
     *
     * @param \DateTime $date Date *(Optional)* (optional)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return \RadioManager\RadioManagerModels\EPGBroadcast
     */
    public function getDailyEPG($date = null)
    {
        list($response) = $this->getDailyEPGWithHttpInfo($date);
        return $response;
    }

    /**
     * Operation getDailyEPGWithHttpInfo
     *
     * Get daily EPG
     *
     * @param \DateTime $date Date *(Optional)* (optional)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return array of \RadioManager\RadioManagerModels\EPGBroadcast, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDailyEPGWithHttpInfo($date = null)
    {
        // parse inputs
        $resourcePath = "/broadcasts/epg/daily";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($date !== null) {
            $queryParams['date'] = $this->apiClient->getSerializer()->toQueryValue($date);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RadioManager\RadioManagerModels\EPGBroadcast',
                '/broadcasts/epg/daily'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RadioManager\RadioManagerModels\EPGBroadcast', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\EPGBroadcast', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\TooManyRequests', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getEPGByDate
     *
     * Get EPG by date
     *
     * @param \DateTime $date Date *(Optional)* (optional)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return \RadioManager\RadioManagerModels\EPGBroadcast
     */
    public function getEPGByDate($date = null)
    {
        list($response) = $this->getEPGByDateWithHttpInfo($date);
        return $response;
    }

    /**
     * Operation getEPGByDateWithHttpInfo
     *
     * Get EPG by date
     *
     * @param \DateTime $date Date *(Optional)* (optional)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return array of \RadioManager\RadioManagerModels\EPGBroadcast, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEPGByDateWithHttpInfo($date = null)
    {
        // parse inputs
        $resourcePath = "/broadcasts/epg";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($date !== null) {
            $queryParams['date'] = $this->apiClient->getSerializer()->toQueryValue($date);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RadioManager\RadioManagerModels\EPGBroadcast',
                '/broadcasts/epg'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RadioManager\RadioManagerModels\EPGBroadcast', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\EPGBroadcast', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\TooManyRequests', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getNextBroadcast
     *
     * Get next Broadcast
     *
     * @throws \RadioManager\ApiException on non-2xx response
     * @return \RadioManager\RadioManagerModels\Broadcast
     */
    public function getNextBroadcast()
    {
        list($response) = $this->getNextBroadcastWithHttpInfo();
        return $response;
    }

    /**
     * Operation getNextBroadcastWithHttpInfo
     *
     * Get next Broadcast
     *
     * @throws \RadioManager\ApiException on non-2xx response
     * @return array of \RadioManager\RadioManagerModels\Broadcast, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNextBroadcastWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/broadcasts/next";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RadioManager\RadioManagerModels\Broadcast',
                '/broadcasts/next'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RadioManager\RadioManagerModels\Broadcast', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\Broadcast', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\TooManyRequests', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getWeeklyEPG
     *
     * Get weekly EPG
     *
     * @param string $date Date *(Optional)* (optional)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return \RadioManager\RadioManagerModels\EPGBroadcast
     */
    public function getWeeklyEPG($date = null)
    {
        list($response) = $this->getWeeklyEPGWithHttpInfo($date);
        return $response;
    }

    /**
     * Operation getWeeklyEPGWithHttpInfo
     *
     * Get weekly EPG
     *
     * @param string $date Date *(Optional)* (optional)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return array of \RadioManager\RadioManagerModels\EPGBroadcast, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWeeklyEPGWithHttpInfo($date = null)
    {
        // parse inputs
        $resourcePath = "/broadcasts/epg/weekly";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($date !== null) {
            $queryParams['date'] = $this->apiClient->getSerializer()->toQueryValue($date);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RadioManager\RadioManagerModels\EPGBroadcast',
                '/broadcasts/epg/weekly'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RadioManager\RadioManagerModels\EPGBroadcast', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\EPGBroadcast', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\TooManyRequests', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listBroadcasts
     *
     * Get all broadcasts.
     *
     * @param int $page Current page *(Optional)* (optional, default to 1)
     * @param \DateTime $start_min Minimum start date *(Optional)* (optional)
     * @param \DateTime $start_max Maximum start date *(Optional)* (optional)
     * @param int $model_type_id Search on ModelType ID *(Optional)* (optional)
     * @param int $tag_id Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param int $presenter_id Search on Presenter ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param int $item_id Search on Item ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param int $block_id Search on Block ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param int $genre_id Search on Genre ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param int $program_id Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param int $_station_id Query on a different (content providing) station *(Optional)* (optional)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return \RadioManager\RadioManagerModels\BroadcastResults
     */
    public function listBroadcasts($page = '1', $start_min = null, $start_max = null, $model_type_id = null, $tag_id = null, $presenter_id = null, $item_id = null, $block_id = null, $genre_id = null, $program_id = null, $_station_id = null)
    {
        list($response) = $this->listBroadcastsWithHttpInfo($page, $start_min, $start_max, $model_type_id, $tag_id, $presenter_id, $item_id, $block_id, $genre_id, $program_id, $_station_id);
        return $response;
    }

    /**
     * Operation listBroadcastsWithHttpInfo
     *
     * Get all broadcasts.
     *
     * @param int $page Current page *(Optional)* (optional, default to 1)
     * @param \DateTime $start_min Minimum start date *(Optional)* (optional)
     * @param \DateTime $start_max Maximum start date *(Optional)* (optional)
     * @param int $model_type_id Search on ModelType ID *(Optional)* (optional)
     * @param int $tag_id Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param int $presenter_id Search on Presenter ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param int $item_id Search on Item ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param int $block_id Search on Block ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param int $genre_id Search on Genre ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param int $program_id Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param int $_station_id Query on a different (content providing) station *(Optional)* (optional)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return array of \RadioManager\RadioManagerModels\BroadcastResults, HTTP status code, HTTP response headers (array of strings)
     */
    public function listBroadcastsWithHttpInfo($page = '1', $start_min = null, $start_max = null, $model_type_id = null, $tag_id = null, $presenter_id = null, $item_id = null, $block_id = null, $genre_id = null, $program_id = null, $_station_id = null)
    {
        if (!is_null($page) && ($page < 0)) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling BroadcastApi.listBroadcasts, must be bigger than or equal to 0.');
        }

        // parse inputs
        $resourcePath = "/broadcasts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($start_min !== null) {
            $queryParams['start-min'] = $this->apiClient->getSerializer()->toQueryValue($start_min);
        }
        // query params
        if ($start_max !== null) {
            $queryParams['start_max'] = $this->apiClient->getSerializer()->toQueryValue($start_max);
        }
        // query params
        if ($model_type_id !== null) {
            $queryParams['model_type_id'] = $this->apiClient->getSerializer()->toQueryValue($model_type_id);
        }
        // query params
        if ($tag_id !== null) {
            $queryParams['tag_id'] = $this->apiClient->getSerializer()->toQueryValue($tag_id);
        }
        // query params
        if ($presenter_id !== null) {
            $queryParams['presenter_id'] = $this->apiClient->getSerializer()->toQueryValue($presenter_id);
        }
        // query params
        if ($item_id !== null) {
            $queryParams['item_id'] = $this->apiClient->getSerializer()->toQueryValue($item_id);
        }
        // query params
        if ($block_id !== null) {
            $queryParams['block_id'] = $this->apiClient->getSerializer()->toQueryValue($block_id);
        }
        // query params
        if ($genre_id !== null) {
            $queryParams['genre_id'] = $this->apiClient->getSerializer()->toQueryValue($genre_id);
        }
        // query params
        if ($program_id !== null) {
            $queryParams['program_id'] = $this->apiClient->getSerializer()->toQueryValue($program_id);
        }
        // query params
        if ($_station_id !== null) {
            $queryParams['_station_id'] = $this->apiClient->getSerializer()->toQueryValue($_station_id);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RadioManager\RadioManagerModels\BroadcastResults',
                '/broadcasts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RadioManager\RadioManagerModels\BroadcastResults', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\BroadcastResults', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\TooManyRequests', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation printBroadcastById
     *
     * Print Broadcast by id
     *
     * @param int $id ID of Broadcast **(Required)** (required)
     * @param int $program_id Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param int $presenter_id Search on Presenter ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param int $tag_id Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return \RadioManager\RadioManagerModels\EPGBroadcast
     */
    public function printBroadcastById($id, $program_id = null, $presenter_id = null, $tag_id = null)
    {
        list($response) = $this->printBroadcastByIdWithHttpInfo($id, $program_id, $presenter_id, $tag_id);
        return $response;
    }

    /**
     * Operation printBroadcastByIdWithHttpInfo
     *
     * Print Broadcast by id
     *
     * @param int $id ID of Broadcast **(Required)** (required)
     * @param int $program_id Search on Program ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param int $presenter_id Search on Presenter ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @param int $tag_id Search on Tag ID *(Optional)* &#x60;(Relation)&#x60; (optional)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return array of \RadioManager\RadioManagerModels\EPGBroadcast, HTTP status code, HTTP response headers (array of strings)
     */
    public function printBroadcastByIdWithHttpInfo($id, $program_id = null, $presenter_id = null, $tag_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling printBroadcastById');
        }
        if (($id < 0)) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling BroadcastApi.printBroadcastById, must be bigger than or equal to 0.');
        }

        // parse inputs
        $resourcePath = "/broadcasts/print/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($program_id !== null) {
            $queryParams['program_id'] = $this->apiClient->getSerializer()->toQueryValue($program_id);
        }
        // query params
        if ($presenter_id !== null) {
            $queryParams['presenter_id'] = $this->apiClient->getSerializer()->toQueryValue($presenter_id);
        }
        // query params
        if ($tag_id !== null) {
            $queryParams['tag_id'] = $this->apiClient->getSerializer()->toQueryValue($tag_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RadioManager\RadioManagerModels\EPGBroadcast',
                '/broadcasts/print/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RadioManager\RadioManagerModels\EPGBroadcast', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\EPGBroadcast', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\TooManyRequests', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateBroadcastByID
     *
     * Update broadcast by id
     *
     * @param int $id ID of Broadcast **(Required)** (required)
     * @param \RadioManager\RadioManagerModels\BroadcastDataInput $data Data *(Optional)* (optional)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return \RadioManager\RadioManagerModels\Success
     */
    public function updateBroadcastByID($id, $data = null)
    {
        list($response) = $this->updateBroadcastByIDWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation updateBroadcastByIDWithHttpInfo
     *
     * Update broadcast by id
     *
     * @param int $id ID of Broadcast **(Required)** (required)
     * @param \RadioManager\RadioManagerModels\BroadcastDataInput $data Data *(Optional)* (optional)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return array of \RadioManager\RadioManagerModels\Success, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateBroadcastByIDWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateBroadcastByID');
        }
        if (($id < 0)) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling BroadcastApi.updateBroadcastByID, must be bigger than or equal to 0.');
        }

        // parse inputs
        $resourcePath = "/broadcasts/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RadioManager\RadioManagerModels\Success',
                '/broadcasts/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RadioManager\RadioManagerModels\Success', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\Success', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\UnprocessableEntity', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\TooManyRequests', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\RadioManagerModels\InternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
