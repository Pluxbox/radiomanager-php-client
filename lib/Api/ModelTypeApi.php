<?php
/**
 * ModelTypeApi
 * PHP version 5
 *
 * @category Class
 * @package  RadioManager
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Pluxbox Radiomanager Client
 *
 * Pluxbox RadioManager gives you the power, flexibility and speed you always wanted in a lightweight and easy-to-use web-based radio solution. With Pluxbox RadioManager you can organise your radio workflow and automate your omnichannel communication with your listeners. We offer wide range specialised services for the radio and connections like Hybrid Radio, Visual Radio, your website and social media without losing focus on your broadcast. For more information visit https://pluxbox.com
 *
 * OpenAPI spec version: 2.0
 * Contact: support@pluxbox.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RadioManager\Api;

use \RadioManager\ApiClient;
use \RadioManager\ApiException;
use \RadioManager\Configuration;
use \RadioManager\ObjectSerializer;

/**
 * ModelTypeApi Class Doc Comment
 *
 * @category Class
 * @package  RadioManager
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ModelTypeApi
{
    /**
     * API Client
     *
     * @var \RadioManager\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \RadioManager\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\RadioManager\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \RadioManager\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \RadioManager\ApiClient $apiClient set the API client
     *
     * @return ModelTypeApi
     */
    public function setApiClient(\RadioManager\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getModelTypeById
     *
     * Get modelType by id
     *
     * @param int $id ID of ModelType **(Required)** (required)
     * @param int $_external_station_id Query on a different (content providing) station *(Optional)* (optional)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return \RadioManager\Model\ModelTypeResult
     */
    public function getModelTypeById($id, $_external_station_id = null)
    {
        list($response) = $this->getModelTypeByIdWithHttpInfo($id, $_external_station_id);
        return $response;
    }

    /**
     * Operation getModelTypeByIdWithHttpInfo
     *
     * Get modelType by id
     *
     * @param int $id ID of ModelType **(Required)** (required)
     * @param int $_external_station_id Query on a different (content providing) station *(Optional)* (optional)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return array of \RadioManager\Model\ModelTypeResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getModelTypeByIdWithHttpInfo($id, $_external_station_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getModelTypeById');
        }
        if (($id < 0)) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling ModelTypeApi.getModelTypeById, must be bigger than or equal to 0.');
        }

        // parse inputs
        $resourcePath = "/model_types/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($_external_station_id !== null) {
            $queryParams['_external_station_id'] = $this->apiClient->getSerializer()->toQueryValue($_external_station_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RadioManager\Model\ModelTypeResult',
                '/model_types/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RadioManager\Model\ModelTypeResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\Model\ModelTypeResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\Model\Forbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\Model\TooManyRequests', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listModelTypes
     *
     * Get all modelTypes.
     *
     * @param int $page Current page *(Optional)* (optional)
     * @param string $model  (optional)
     * @param int $program_id Search on Program ID *(Optional)* (optional)
     * @param int $broadcast_id Search on Broadcast ID *(Optional)* (optional)
     * @param int $item_id Search on Item ID *(Optional)* (optional)
     * @param int $campaign_id Search on Campaign ID *(Optional)* (optional)
     * @param int $presenter_id Search on Presenter ID *(Optional)* (optional)
     * @param int $contact_id Search on Contact ID *(Optional)* (optional)
     * @param int $_external_station_id Query on a different (content providing) station *(Optional)* (optional)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return \RadioManager\Model\ModelTypeResults
     */
    public function listModelTypes($page = null, $model = null, $program_id = null, $broadcast_id = null, $item_id = null, $campaign_id = null, $presenter_id = null, $contact_id = null, $_external_station_id = null)
    {
        list($response) = $this->listModelTypesWithHttpInfo($page, $model, $program_id, $broadcast_id, $item_id, $campaign_id, $presenter_id, $contact_id, $_external_station_id);
        return $response;
    }

    /**
     * Operation listModelTypesWithHttpInfo
     *
     * Get all modelTypes.
     *
     * @param int $page Current page *(Optional)* (optional)
     * @param string $model  (optional)
     * @param int $program_id Search on Program ID *(Optional)* (optional)
     * @param int $broadcast_id Search on Broadcast ID *(Optional)* (optional)
     * @param int $item_id Search on Item ID *(Optional)* (optional)
     * @param int $campaign_id Search on Campaign ID *(Optional)* (optional)
     * @param int $presenter_id Search on Presenter ID *(Optional)* (optional)
     * @param int $contact_id Search on Contact ID *(Optional)* (optional)
     * @param int $_external_station_id Query on a different (content providing) station *(Optional)* (optional)
     * @throws \RadioManager\ApiException on non-2xx response
     * @return array of \RadioManager\Model\ModelTypeResults, HTTP status code, HTTP response headers (array of strings)
     */
    public function listModelTypesWithHttpInfo($page = null, $model = null, $program_id = null, $broadcast_id = null, $item_id = null, $campaign_id = null, $presenter_id = null, $contact_id = null, $_external_station_id = null)
    {
        if (!is_null($page) && ($page < 0)) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling ModelTypeApi.listModelTypes, must be bigger than or equal to 0.');
        }

        // parse inputs
        $resourcePath = "/model_types";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($model !== null) {
            $queryParams['model'] = $this->apiClient->getSerializer()->toQueryValue($model);
        }
        // query params
        if ($program_id !== null) {
            $queryParams['program_id'] = $this->apiClient->getSerializer()->toQueryValue($program_id);
        }
        // query params
        if ($broadcast_id !== null) {
            $queryParams['broadcast_id'] = $this->apiClient->getSerializer()->toQueryValue($broadcast_id);
        }
        // query params
        if ($item_id !== null) {
            $queryParams['item_id'] = $this->apiClient->getSerializer()->toQueryValue($item_id);
        }
        // query params
        if ($campaign_id !== null) {
            $queryParams['campaign_id'] = $this->apiClient->getSerializer()->toQueryValue($campaign_id);
        }
        // query params
        if ($presenter_id !== null) {
            $queryParams['presenter_id'] = $this->apiClient->getSerializer()->toQueryValue($presenter_id);
        }
        // query params
        if ($contact_id !== null) {
            $queryParams['contact_id'] = $this->apiClient->getSerializer()->toQueryValue($contact_id);
        }
        // query params
        if ($_external_station_id !== null) {
            $queryParams['_external_station_id'] = $this->apiClient->getSerializer()->toQueryValue($_external_station_id);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\RadioManager\Model\ModelTypeResults',
                '/model_types'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\RadioManager\Model\ModelTypeResults', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\Model\ModelTypeResults', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\Model\Forbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\Model\NotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\RadioManager\Model\TooManyRequests', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
